import androidx.compose.desktop.ui.tooling.preview.Preview
import androidx.compose.foundation.Canvas
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.material.Button
import androidx.compose.material.MaterialTheme
import androidx.compose.material.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.ExperimentalComposeUiApi
import androidx.compose.ui.Modifier
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.input.pointer.PointerEventType
import androidx.compose.ui.input.pointer.onPointerEvent

import androidx.compose.ui.window.Window
import androidx.compose.ui.window.application
import kotlin.math.sqrt


@OptIn(ExperimentalComposeUiApi::class)
@Composable
@Preview
fun App() {
    var points by remember { mutableStateOf(mutableListOf<Offset>()) }
    Canvas(modifier= Modifier.fillMaxSize().clickable{}.onPointerEvent(PointerEventType.Press)
    {
        var pnt=it.changes.first().position
    points.add(pnt)}){
        var crtpnt=points.first()
        var startpnt=crtpnt
        for (pnt in points){
            if (pnt.x >= crtpnt.x){
                crtpnt=pnt
                startpnt=crtpnt
            }
        }
        var cosval=-1
        var nxtpnt=Offset(0f,0f)
        for (pnt in points){
            if (pnt!=startpnt){
                if(csn(Offset(1f,0f),pnt -crtpnt)>=cosval){
                    nxtpnt=pnt
                }
            }
        }
        this.drawLine(Color.Red, crtpnt, nxtpnt)
    }

}
fun csn(a:Offset,b:Offset):Float{
    return (a.x*b.x+a.y*b.y)/sqrt((a.x*a.x+a.y*a.y)*(b.x*b.x+b.y*b.y))
}

fun main() = application {
    Window(onCloseRequest = ::exitApplication) {
        App()
    }
}
